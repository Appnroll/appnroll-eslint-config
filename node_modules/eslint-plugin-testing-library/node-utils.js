"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function isCallExpression(node) {
    return node && node.type === 'CallExpression';
}
exports.isCallExpression = isCallExpression;
function isAwaitExpression(node) {
    return node && node.type === 'AwaitExpression';
}
exports.isAwaitExpression = isAwaitExpression;
function isIdentifier(node) {
    return node && node.type === 'Identifier';
}
exports.isIdentifier = isIdentifier;
function isMemberExpression(node) {
    return node && node.type === 'MemberExpression';
}
exports.isMemberExpression = isMemberExpression;
function isLiteral(node) {
    return node && node.type === 'Literal';
}
exports.isLiteral = isLiteral;
function isImportSpecifier(node) {
    return node && node.type === 'ImportSpecifier';
}
exports.isImportSpecifier = isImportSpecifier;
function isImportDefaultSpecifier(node) {
    return node && node.type === 'ImportDefaultSpecifier';
}
exports.isImportDefaultSpecifier = isImportDefaultSpecifier;
function isBlockStatement(node) {
    return node && node.type === 'BlockStatement';
}
exports.isBlockStatement = isBlockStatement;
function isVariableDeclarator(node) {
    return node && node.type === 'VariableDeclarator';
}
exports.isVariableDeclarator = isVariableDeclarator;
function isObjectPattern(node) {
    return node && node.type === 'ObjectPattern';
}
exports.isObjectPattern = isObjectPattern;
function isProperty(node) {
    return node && node.type === 'Property';
}
exports.isProperty = isProperty;
function isJSXAttribute(node) {
    return node && node.type === 'JSXAttribute';
}
exports.isJSXAttribute = isJSXAttribute;
function findClosestCallExpressionNode(node) {
    if (isCallExpression(node)) {
        return node;
    }
    return findClosestCallExpressionNode(node.parent);
}
exports.findClosestCallExpressionNode = findClosestCallExpressionNode;
function findClosestCallNode(node, name) {
    if (!node.parent) {
        return null;
    }
    if (isCallExpression(node) &&
        isIdentifier(node.callee) &&
        node.callee.name === name) {
        return node;
    }
    else {
        return findClosestCallNode(node.parent, name);
    }
}
exports.findClosestCallNode = findClosestCallNode;
function hasThenProperty(node) {
    return (isMemberExpression(node) &&
        isIdentifier(node.property) &&
        node.property.name === 'then');
}
exports.hasThenProperty = hasThenProperty;
function isArrowFunctionExpression(node) {
    return node && node.type === 'ArrowFunctionExpression';
}
exports.isArrowFunctionExpression = isArrowFunctionExpression;
